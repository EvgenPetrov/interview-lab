/**
 * –ó–ê–î–ê–ß–ê (TSX): –ê–∫–∫–æ—Ä–¥–µ–æ–Ω
 * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç items: { title: string; content: React.ReactNode }[]
 * - –£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–¥–Ω–∏–º –æ—Ç–∫—Ä—ã—Ç—ã–º –ø—É–Ω–∫—Ç–æ–º (uncontrolled)
 * - –í–Ω–∏–∑—É –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ previewProps –¥–ª—è –¥–µ–º–æ
 */
import { useState, type FC, type ReactNode } from "react";

type Item = { title: string; content: ReactNode };
type Props = { items: Item[] };

type AccordionComponent = FC<Props> & { previewProps?: Props };

const Accordion: AccordionComponent = ({ items = [] }) => {
  const [open, setOpen] = useState<number | null>(0);

  return (
    <div>
      {items.map((it, idx) => {
        const isOpen = open === idx;
        return (
          <div key={idx}>
            <button type="button" onClick={() => setOpen(isOpen ? null : idx)}>
              {it.title}
            </button>
            {isOpen && <div>{it.content}</div>}
          </div>
        );
      })}
    </div>
  );
};

// üëá —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
Accordion.previewProps = {
  items: [
    { title: "–ß—Ç–æ —ç—Ç–æ?", content: "–ú–∏–Ω–∏-–∞–∫–∫–æ—Ä–¥–µ–æ–Ω –Ω–∞ TSX." },
    { title: "–ó–∞—á–µ–º?", content: "–¢–∏–ø–∏—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Ç–∏–ø—ã –ø—Ä–æ–ø—Å–æ–≤." },
    { title: "–ö–∞–∫?", content: "–û—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç –∑–∞ —Ä–∞–∑." },
  ],
};

export default Accordion;
