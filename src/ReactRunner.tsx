import { useEffect, useState, createElement, type ComponentType, type ReactElement } from "react";

type PropsMap = Record<string, unknown>;

// üëâ –ï–¥–∏–Ω—ã–π —Ç–∏–ø –¥–ª—è –ø–æ–¥–≥—Ä—É–∂–∞–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π
export type ReactModuleShape = {
  default?: ComponentType<PropsMap>;
  Preview?: ComponentType<PropsMap>;
  previewProps?: PropsMap;
  getPreviewProps?: () => PropsMap;
};

// üëâ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–∏–ø –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Å previewProps
type PreviewableComponent = ComponentType<PropsMap> & {
  previewProps?: PropsMap;
};

type Props = {
  moduleLoader: () => Promise<ReactModuleShape>;
  rawLoader?: () => Promise<string>;
};

export default function ReactRunner({ moduleLoader }: Props) {
  const [view, setView] = useState<ReactElement | null>(null);

  useEffect(() => {
    let cancelled = false;

    (async () => {
      try {
        const mod = await moduleLoader();
        if (cancelled) return;

        const Comp = (mod.Preview ?? mod.default) as PreviewableComponent | undefined;

        if (!Comp) {
          setView(<div>–í –º–æ–¥—É–ª–µ –Ω–µ—Ç React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (–Ω–µ—Ç export default / Preview).</div>);
          return;
        }

        // –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º previewProps, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        const props = Comp.previewProps ?? {};

        setView(<div>{createElement(Comp, props)}</div>);
      } catch (err) {
        console.error("ReactRunner: load failed", err);
        setView(<div>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ React-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.</div>);
      }
    })();

    return () => {
      cancelled = true;
    };
  }, [moduleLoader]);

  return view ?? <span className="muted">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</span>;
}
